<nav>
    <ul class="pagination">

        @foreach (var link in Links)
        {
                    <li @onclick=@(() => InternalSelectedPage(link)) style="cursor: pointer" class="page-item @(link.Enable ? null : "disabled") @(link.Enable ? "active" : null)">
                        <a class="page-link">@link.Text</a>
                    </li>
        }
    </ul>
</nav>



@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public int Radio { get; set; } = 2;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<PageModel> Links = new();

    protected override void OnParametersSet()
    {
        Links = new List<PageModel>();

        var previousLinkEnable = CurrentPage != 1;
        var previousLinkPage = CurrentPage - 1;
        Links.Add(new PageModel
            {
                Text = "Anterior",
                Page = previousLinkPage,
                Enable = previousLinkEnable
            });

        //if (CurrentPage <= 10 && TotalPages <= 10)
        //{

        //    pintar(TotalPages);
        //}
        //if (CurrentPage <= 10 && TotalPages > 10)
        //{
        //    pintar(10);
        //}
        //if (CurrentPage > 10 && TotalPages > 10)
        //{
        //    if (TotalPages < (CurrentPage + 1))
        //    {
        //        pintar(CurrentPage + 1, CurrentPage - 10);
        //    }
        //    else
        //    {
        //        pintar(TotalPages);
        //    }
        //}
        if (TotalPages <= 10 && TotalPages > 0)
        {
            pintar(TotalPages);
        }
        if (TotalPages > 10)
        {
            if(CurrentPage <= 10)
            {
                pintar(10);
            }
            if(CurrentPage > 10)
            {
                if (CurrentPage==TotalPages)
                {
                    pintar(TotalPages, TotalPages - 9);
                }
                if (CurrentPage<TotalPages)                
                {

                    pintar(CurrentPage, CurrentPage - 9);

                }
            }
        }

        

        // for (int i = 1; i <= TotalPages; i++)


        var linkNextEnable = CurrentPage != TotalPages;
        var linkNextPage = CurrentPage + 1;
        Links.Add(new PageModel
            {
                Text = "Siguiente",
                Page = linkNextPage,
                Enable = linkNextEnable
            });

    }

    private void pintar(int cantidad, int inicial = 1)
    {
        for (int i = inicial; i <= cantidad; i++)
        {
            //if (i >= CurrentPage - Radio && i <= CurrentPage + Radio)
            //{

                Links.Add(new PageModel
                    {
                        Page = i,
                        Enable = CurrentPage == i,
                        Text = $"{i}"
                    });

            //}
        }
    }

    private async Task InternalSelectedPage(PageModel pageModel)
    {
        if (pageModel.Page == CurrentPage || pageModel.Page == 0 || pageModel.Page == TotalPages + 1)
        {
            return;
        }

        await SelectedPage.InvokeAsync(pageModel.Page);
    }



    class PageModel
    {
    public string Text { get; set; } = null!;
    public int Page { get; set; }
    public bool Enable { get; set; } = true;
    public bool Active { get; set; } = false;

    }
}
