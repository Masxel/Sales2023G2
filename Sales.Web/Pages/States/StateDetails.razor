@page "/states/details/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (state is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@state.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary mb-3" href="/cities/create/@StateId">Nueva ciudad</a>
        <a class="btn btn-success mb-3" href="/countries/details/@state.CountryId">Regresar</a>
    </div>

    <GenericList MyList="cities">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ciudades</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in cities!)
                    {
                        <tr>
                            <td>
                                @city.Name
                            </td>
                            <td>
                                <a class="btn btn-warning" href="/cities/edit/@city.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(()=> DeleteAsync(city.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </Body>
    </GenericList>

}

@code {
    [Parameter]
    public int StateId { get; set; }

    private State state;
    private List<City>? cities;


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<State>($"/api/states/{StateId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();

            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response;
        cities = state!.Cities!.ToList();
    }



    private async Task DeleteAsync(int CityId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });


        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/cities/{CityId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != System.Net.HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            }
        }

        await LoadAsync();
    }
}
