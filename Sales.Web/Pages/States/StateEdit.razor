@page "/states/edit/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Estado/Departamento</h3>
@if (state is null)
{
        <div class="spinner"/>
}
else
{
    <StatesForm @ref="stateForm" state="state" OnValidSubmit="EditAsync" ReturnAction="Return" />
}


@code {
    private State? state;
    private StatesForm? stateForm;


    [Parameter]
    public int StateId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<State>($"/api/states/{StateId}");


        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/states/", state);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();


    }

    private void Return()
    {
        stateForm!.formPostedSuccessFully = true;
        navigationManager.NavigateTo($"/countries/details/{state!.CountryId}");
    }
}
