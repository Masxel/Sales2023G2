@page "/states/create/{CountryId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager;
@inject SweetAlertService sweetAlertService;
@attribute [Authorize(Roles = "Admin")]

<h3>Crear Estado/Departamento</h3>

@*En este tag llamamos el countryform de CountryForm.razor
    Ademas instanciamos la entidad country para crearla. Con esto se validan los Data annotation.
    *@
<StatesForm @ref="stateForm" state="state" OnValidSubmit="CreateAsync" ReturnAction="Return"></StatesForm>
@*La linea @ref nos permite referenciar el formulario en una variable para obtener acceso a los eventos
    que se desarrollan al usar el formulario.
*@
@code {
    private State state = new();
    //Los signos de interrogación al final de la instancia quiere decir que permite valores nulos
    private StatesForm? stateForm;


    [Parameter]
    public int CountryId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task CreateAsync()
    {
        state.CountryId = CountryId;
        var httpResponse = await repository.Post("/api/states", state);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());

        Return();
    }

    private void Return()
    {
        stateForm!.formPostedSuccessFully = true;
        navigationManager.NavigateTo($"/countries/details/{CountryId}");
    }

}
