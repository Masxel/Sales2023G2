@page "/categories/edit/{id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar categoría</h3>

@if (category is null)
{
    <div class="spinner"/>
}
else
{
    <CategoryForm @ref="categoryForm" category="category" OnValidSubmit="EditAsync" ReturnAction="Return" />
}




@code {
    private Category? category;
    private CategoryForm? categoryForm;

    [Parameter]
    public int id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Category>($"/api/categories/{id}");


        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/categories");
                return;
            }
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        category = responseHttp.Response;
    }


    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/categories/", category);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();


    }

    private void Return()
    {
        categoryForm!.formPostedSuccessFully = true;
        navigationManager.NavigateTo("/categories");
    }
}
