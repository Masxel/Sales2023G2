@page "/categories"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Categoría de productos</h3>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync"
            Radio="@showPages" />

<a class="btn btn-primary mb-3" href="/categories/create">Nueva categoría</a>
<!-- En esta etiqueta se esta llamando la clase GenericList.razor y le estoy asignando
    la lista de paises obtenidos. Como podemos ver, estados abriendo las variables Body y Loading que tambien existen en la clase GenericList, de esta manera asignamos valores a
    las variables de la clase que estamos llamando; por medio de etiquetas.

    si intentaramos borrar el tag 'Body' podriamos evidenciar que la etiqueta nos va a generar un error porque la variable en la clase GenericList, se pide como obligatoria[EditorRequired]
-->
<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Categorias</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories!)
                {
                    <tr>
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(()=> DeleteAsync(category.Id))>Borrar</button>
                        </td>
                        <td>
                            @category.Name
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </Body>
</GenericList>
@code {
    public List<Category>? Categories { get; set; }
    private int currentPage = 1;
    private int totalPages;
    private int showPages;

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = $"api/categories?page={page}";
        string url2 = $"api/categories/totalPages";

        var responseHppt = await repository.Get<List<Category>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Categories = responseHppt.Response!;
        totalPages = responseHppt2.Response!;

        if(totalPages <= 10)
        {
            showPages = totalPages;
        }
        else
        {
            showPages = 10;
        }

    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "¿Deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });


        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/categories/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != System.Net.HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            }
        }

        await LoadAsync();
    }



}
