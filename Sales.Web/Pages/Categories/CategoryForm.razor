@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
   <DataAnnotationsValidator/>
   
       <label>Categoría:</label>
       <div class="mb-3">
        @*InputText nos da una caja de texto para escribir los países que queremos crear.
        *@
           <InputText class="form-control" @bind-Value="@category.Name"></InputText>
           <ValidationMessage For="@(() => category.Name)"></ValidationMessage>
       </div>

       <button class="btn btn-primary" type="submit">Guardar cambios</button>
        <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {

    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Category category { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool formPostedSuccessFully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(category);
    }


    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();
        if (!formWasModified || formPostedSuccessFully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "No has guardado los cambios ¿Deseas abandonar la pagina y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });


        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
